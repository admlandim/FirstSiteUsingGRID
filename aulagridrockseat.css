############ CSS ##############

############ GRID #############

-Bidimensional
-Divisão de toda a página em linhas e Colunas
-Colocar elementos onde quiser nessa divisão

############ GRID OU FLEXBOX #########

- Grid: duas dimensões (colunas e linhas)
- Flexbox: Uma dimensão (ou coluna ou linha)
- Um complementa o trabalho do outro 
- Verificar queis nevegadores ainda nao aceitam

########### Propriedades ##############

Vamos separar em 2 grupos:

container e item 

- display: grid;
- grid-template-columns;
- grid-templates-rows;
- grid-gap
    - grid-row-gap
    - grid-columns-gap
- grid-template-areas;

... e mais 4 propriedades e alinhamento



############### items #############

- grid-column
    - grid-column-start
    - grid-column-end
- grid-row
    - grid-row-start
    - grid-row-end
- grid-area

... e mais 2 propriedades de alinhamento



##### Existem 6 propriedades para alinhamentos ############# 

1. "justify-content"
2. "align-content"
3. "justity-items"
4. "align-items"
5. "justify-self"
6. "align-self"

Vamos separá-los em 2 grupos

1. "justify" e "align"
2. "content", "items" e "self"


####### justify e align ######

Sabenda que o grid é bidimensional, nós temos o eixo x e o y.

O **eixo x** é o posicionamento horizontal, da esquerda para a direita;

O **eixo y** é o posicionamento vertical, de cima para baixo;


## Content, items e self ######

Juntando o "justify", ou "aling", com esses elementos: content, items e self; nós observamos nossas propriedades.

## Content  ######

"justify-content", e "aling-content", nos permite alinhar o proprio grid, relativo aoespaço fora do grid.

Podemos usar **7 valores**
1. start
2. end
3. center 
4. stretch 
5. space-between 
6. space-around 
7. space-evenly

"justify-items", e "aling-items", nos permite alinhar os items do nosso grid, em qualquer espaço disponivel, na celula que ele habitar.